// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repositories.Postgres;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231120155456_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Models.ConvertedSubtitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConvertedVideoId")
                        .HasColumnType("integer")
                        .HasColumnName("converted_video_id");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.HasIndex("ConvertedVideoId");

                    b.ToTable("converted_subtitles");
                });

            modelBuilder.Entity("Repositories.Models.ConvertedVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RawVideoId")
                        .HasColumnType("integer")
                        .HasColumnName("raw_video_id");

                    b.HasKey("Id");

                    b.HasIndex("RawVideoId")
                        .IsUnique();

                    b.ToTable("converted_videos");
                });

            modelBuilder.Entity("Repositories.Models.ConvertedVideoTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConvertedVideoId")
                        .HasColumnType("integer")
                        .HasColumnName("converted_video_id");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.HasIndex("ConvertedVideoId");

                    b.ToTable("converted_video_tracks");
                });

            modelBuilder.Entity("Repositories.Models.RawVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ExtractSubtitleStatus")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("extract_subtitle_status");

                    b.Property<string>("ExtractTracksStatus")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("extract_tracks_status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_uuid");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id");

                    b.ToTable("raw_videos");
                });

            modelBuilder.Entity("Repositories.Models.WebhookUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("Events")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("events");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("WebhookUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("webhook_url");

                    b.HasKey("Id");

                    b.ToTable("webhook_users");
                });

            modelBuilder.Entity("Repositories.Models.ConvertedSubtitle", b =>
                {
                    b.HasOne("Repositories.Models.ConvertedVideo", null)
                        .WithMany("Subtitles")
                        .HasForeignKey("ConvertedVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repositories.Models.ConvertedVideo", b =>
                {
                    b.HasOne("Repositories.Models.RawVideo", null)
                        .WithOne("ConvertedVideo")
                        .HasForeignKey("Repositories.Models.ConvertedVideo", "RawVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repositories.Models.ConvertedVideoTrack", b =>
                {
                    b.HasOne("Repositories.Models.ConvertedVideo", null)
                        .WithMany("Streams")
                        .HasForeignKey("ConvertedVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repositories.Models.ConvertedVideo", b =>
                {
                    b.Navigation("Streams");

                    b.Navigation("Subtitles");
                });

            modelBuilder.Entity("Repositories.Models.RawVideo", b =>
                {
                    b.Navigation("ConvertedVideo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
